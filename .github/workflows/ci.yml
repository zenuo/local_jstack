name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build-jar-without-native:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - run: mkdir -p build/src/main/cpp
    - uses: actions/download-artifact@v4
      with:
        path: build/src/main/cpp
        pattern: native-*
        merge-multiple: true
    - run: ls -lh build/src/main/cpp
    - run: mvn package
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v4
      with:
        name: localjstack.jar
        path: staging
  build-native:
    needs: build-jar-without-native
    runs-on: ${{ matrix.os }}
    if: ${{!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]')}}
    strategy:
      fail-fast: false
      matrix:
        include: 
          - build_name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - build_name: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc
          - build_name: macos-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
          # - build_name: macos-aarch64
          #   os: macos-14
          #   target: aarch64-apple-darwin
    env:
      ARTIFACT_NAME: native-${{ matrix.target }}
    steps:
    - uses: actions/checkout@v4

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test Unix
      working-directory: ${{github.workspace}}/build
      if: runner.os != 'Windows'
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}
    
    - uses: actions/download-artifact@v4
      with:
        path: build
        name: localjstack.jar
    
    - name: Test Windows
      if: runner.os == 'Windows'
      run: |
        7z x ${{github.workspace}}/build/localjstack.jar.zip -o${{github.workspace}}/build/
        .\testThreadDump.ps1 -jdkPath ${{github.workspace}}/build -jdkVersions 11.0.26, 17.0.14, 21.0.3 -jarPath ${{github.workspace}}/build/localjstack-0.0.1.jar -dllPath ${{github.workspace}}/build/src/main/cpp/Release/localjstack.dll
        move ${{github.workspace}}/build/src/main/cpp/Release/localjstack.dll ${{github.workspace}}/build/src/main/cpp/localjstack.dll

    - name: Archive artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.ARTIFACT_NAME}}
        path: |
          ${{github.workspace}}/build/src/main/cpp/liblocaljstack.so.0.1
          ${{github.workspace}}/build/src/main/cpp/liblocaljstack.0.1.dylib
          ${{github.workspace}}/build/src/main/cpp/localjstack.dll
          ${{github.workspace}}/build/src/main/cpp/localjstack.map
        retention-days: 1
        if-no-files-found: ignore
  build-jar:
    needs: build-native
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
    - run: mkdir -p build/src/main/cpp
    - uses: actions/download-artifact@v4
      with:
        path: build/src/main/cpp
        pattern: native-*
        merge-multiple: true
    - run: ls -lh build/src/main/cpp
    - run: mvn package
    - run: mkdir staging && cp target/*.jar staging
    - uses: actions/upload-artifact@v4
      with:
        name: localjstack.jar
        path: staging
